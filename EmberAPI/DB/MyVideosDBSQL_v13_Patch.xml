<?xml version="1.0"?>
<CommandFile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <transaction name="MyVideosDBSQL_v13_to_v14">
    <command type="DB">
      <description>1</description>
      <execute>
        CREATE TABLE Actors01(
        Name,
        Thumb
        );

        INSERT INTO Actors01
        SELECT
        Name,
        Thumb
        FROM Actors;

        DROP TABLE Actors;

        CREATE TABLE actor (
        idActor INTEGER PRIMARY KEY AUTOINCREMENT,
        strActor TEXT NOT NULL,
        strThumb TEXT
        );

        INSERT INTO actor
        (strActor,
        strThumb)
        SELECT
        Name,
        Thumb
        FROM Actors01;

        DROP TABLE Actors01;
      </execute>
    </command>
    <command type="DB">
      <description>2</description>
      <execute>
        CREATE TABLE TVEpActors01(
        TVEpID,
        ActorName,
        Role
        );

        INSERT INTO TVEpActors01
        SELECT
        TVEpID,
        ActorName,
        Role
        FROM TVEpActors;

        DROP TABLE TVEpActors;

        CREATE TABLE actorlinkepisode (
        idActor integer,
        idEpisode integer,
        strRole text,
        iOrder integer
        );

        INSERT INTO actorlinkepisode
        (idActor,
        idEpisode,
        strRole)
        SELECT
        A.idActor,
        B.TVEpID,
        B.Role
        FROM
        actor A,
        TVEpActors01 B
        WHERE
        A.strActor = B.ActorName;

        DROP TABLE TVEpActors01;
        
        CREATE UNIQUE INDEX ix_actorlinkepisode_1
        ON actorlinkepisode
        (idActor, idEpisode);

        CREATE UNIQUE INDEX ix_actorlinkepisode_2
        ON actorlinkepisode
        (idEpisode, idActor);
      </execute>
    </command>
    <command type="DB">
      <description>3</description>
      <execute>
        CREATE TABLE MoviesActors01(
        MovieID,
        ActorName,
        Role
        );

        INSERT INTO MoviesActors01
        SELECT
        MovieID,
        ActorName,
        Role
        FROM MoviesActors;

        DROP TABLE MoviesActors;

        CREATE TABLE actorlinkmovie (
        idActor integer,
        idMovie integer,
        strRole text,
        iOrder integer
        );

        INSERT INTO actorlinkmovie
        (idActor,
        idMovie,
        strRole)
        SELECT
        A.idActor,
        B.MovieID,
        B.Role
        FROM
        actor A,
        MoviesActors01 B
        WHERE
        A.strActor = B.ActorName;

        DROP TABLE MoviesActors01;

        CREATE UNIQUE INDEX ix_actorlinkmovie_1
        ON actorlinkmovie
        (idActor, idMovie);

        CREATE UNIQUE INDEX ix_actorlinkmovie_2
        ON actorlinkmovie
        (idMovie, idActor);
      </execute>
    </command>
    <command type="DB">
      <description>4</description>
      <execute>
        CREATE TABLE TVShowActors01(
        TVShowID,
        ActorName,
        Role
        );

        INSERT INTO TVShowActors01
        SELECT
        TVShowID,
        ActorName,
        Role
        FROM TVShowActors;

        DROP TABLE TVShowActors;

        CREATE TABLE actorlinktvshow (
        idActor integer,
        idShow integer,
        strRole text,
        iOrder integer
        );

        INSERT INTO actorlinktvshow
        (idActor,
        idShow,
        strRole)
        SELECT
        A.idActor,
        B.TVShowID,
        B.Role
        FROM
        actor A,
        TVShowActors01 B
        WHERE
        A.strActor = B.ActorName;

        DROP TABLE TVShowActors01;

        CREATE UNIQUE INDEX ix_actorlinktvshow_1
        ON actorlinktvshow
        (idActor, idShow);

        CREATE UNIQUE INDEX ix_actorlinktvshow_2
        ON actorlinktvshow
        (idShow, idActor);
      </execute>
    </command>
    <command type="DB">
      <description>5</description>
      <execute>
        CREATE TABLE tag (
        idTag   integer PRIMARY KEY,
        strTag  text
        );

        CREATE UNIQUE INDEX ix_tag_1
        ON tag
        (strTag);
      </execute>
    </command>
    <command type="DB">
      <description>6</description>
      <execute>
        CREATE TABLE taglinks (
        idTag       integer,
        idMedia     integer,
        media_type  text
        );

        CREATE UNIQUE INDEX ix_taglinks_1
        ON taglinks
        (idTag, media_type, idMedia);

        CREATE UNIQUE INDEX ix_taglinks_2
        ON taglinks
        (idMedia, media_type, idTag);

        CREATE INDEX ix_taglinks_3
        ON taglinks
        (media_type);

        CREATE TRIGGER delete_tag
        AFTER DELETE
        ON taglinks
        BEGIN DELETE FROM tag WHERE idTag=old.idTag AND idTag NOT IN (SELECT DISTINCT idTag FROM taglinks); END;
      </execute>
    </command>
    <command type="DB">
      <description>4</description>
      <execute>
        CREATE TABLE Movies01(
        ID,
        MoviePath,
        Type,
        ListTitle,
        HasPoster,
        HasFanart,
        HasNfo,
        HasTrailer,
        HasSub,
        HasEThumbs,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        HasWatched,
        Trailer,
        PosterPath,
        FanartPath,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        UseFolder,
        OutOfTolerance,
        VideoSource,
        NeedsSave,
        SortTitle,
        DateAdded,
        HasEFanarts,
        EFanartsPath,
        HasBanner,
        BannerPath,
        HasLandscape,
        LandscapePath,
        HasTheme,
        ThemePath,
        HasDiscArt,
        DiscArtPath,
        HasClearLogo,
        ClearLogoPath,
        HasClearArt,
        ClearArtPath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet
        );

        INSERT INTO Movies01
        SELECT
        ID,
        MoviePath,
        Type,
        ListTitle,
        HasPoster,
        HasFanart,
        HasNfo,
        HasTrailer,
        HasSub,
        HasEThumbs,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        HasWatched,
        Trailer,
        PosterPath,
        FanartPath,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        UseFolder,
        OutOfTolerance,
        VideoSource,
        NeedsSave,
        SortTitle,
        DateAdded,
        HasEFanarts,
        EFanartsPath,
        HasBanner,
        BannerPath,
        HasLandscape,
        LandscapePath,
        HasTheme,
        ThemePath,
        HasDiscArt,
        DiscArtPath,
        HasClearLogo,
        ClearLogoPath,
        HasClearArt,
        ClearArtPath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet
        FROM Movies;

        DROP TABLE Movies;

        CREATE TABLE movie (
        idMovie         integer PRIMARY KEY AUTOINCREMENT,
        MoviePath       text,
        Type            bool,
        ListTitle       text,
        HasPoster       bool NOT NULL DEFAULT 0,
        HasFanart       bool NOT NULL DEFAULT 0,
        HasNfo          bool NOT NULL DEFAULT 0,
        HasTrailer      bool NOT NULL DEFAULT 0,
        HasSub          bool NOT NULL DEFAULT 0,
        HasEThumbs      bool NOT NULL DEFAULT 0,
        "New"           bool NOT NULL DEFAULT 0,
        Mark            bool NOT NULL DEFAULT 0,
        Source          text,
        Imdb            text,
        Lock            bool,
        Title           text,
        OriginalTitle   text,
        Year            text,
        Rating          text,
        Votes           text,
        MPAA            text,
        Top250          text,
        Country         text,
        Outline         text,
        Plot            text,
        Tagline         text,
        Certification   text,
        Genre           text,
        Studio          text,
        Runtime         text,
        ReleaseDate     text,
        Director        text,
        Credits         text,
        Playcount       text,
        HasWatched      bool NOT NULL DEFAULT 0,
        Trailer         text,
        PosterPath      text,
        FanartPath      text,
        EThumbsPath     text,
        NfoPath         text,
        TrailerPath     text,
        SubPath         text,
        FanartURL       text,
        UseFolder       bool,
        OutOfTolerance  bool,
        VideoSource     text,
        NeedsSave       bool,
        SortTitle       text,
        DateAdded       integer,
        HasEFanarts     bool NOT NULL DEFAULT 0,
        EFanartsPath    text,
        HasBanner       bool NOT NULL DEFAULT 0,
        BannerPath      text,
        HasLandscape    bool NOT NULL DEFAULT 0,
        LandscapePath   text,
        HasTheme        bool NOT NULL DEFAULT 0,
        ThemePath       text,
        HasDiscArt      bool NOT NULL DEFAULT 0,
        DiscArtPath     text,
        HasClearLogo    bool NOT NULL DEFAULT 0,
        ClearLogoPath   text,
        HasClearArt     bool NOT NULL DEFAULT 0,
        ClearArtPath    text,
        TMDB            text,
        TMDBColID       text,
        DateModified    integer,
        MarkCustom1     bool NOT NULL DEFAULT 0,
        MarkCustom2     bool NOT NULL DEFAULT 0,
        MarkCustom3     bool NOT NULL DEFAULT 0,
        MarkCustom4     bool NOT NULL DEFAULT 0,
        HasSet          bool NOT NULL DEFAULT 0
        );

        INSERT INTO movie
        (idMovie,
        MoviePath,
        Type,
        ListTitle,
        HasPoster,
        HasFanart,
        HasNfo,
        HasTrailer,
        HasSub,
        HasEThumbs,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        HasWatched,
        Trailer,
        PosterPath,
        FanartPath,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        UseFolder,
        OutOfTolerance,
        VideoSource,
        NeedsSave,
        SortTitle,
        DateAdded,
        HasEFanarts,
        EFanartsPath,
        HasBanner,
        BannerPath,
        HasLandscape,
        LandscapePath,
        HasTheme,
        ThemePath,
        HasDiscArt,
        DiscArtPath,
        HasClearLogo,
        ClearLogoPath,
        HasClearArt,
        ClearArtPath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet)
        SELECT
        ID,
        MoviePath,
        Type,
        ListTitle,
        HasPoster,
        HasFanart,
        HasNfo,
        HasTrailer,
        HasSub,
        HasEThumbs,
        "New",
        Mark,
        Source,
        Imdb,
        Lock,
        Title,
        OriginalTitle,
        Year,
        Rating,
        Votes,
        MPAA,
        Top250,
        Country,
        Outline,
        Plot,
        Tagline,
        Certification,
        Genre,
        Studio,
        Runtime,
        ReleaseDate,
        Director,
        Credits,
        Playcount,
        HasWatched,
        Trailer,
        PosterPath,
        FanartPath,
        EThumbsPath,
        NfoPath,
        TrailerPath,
        SubPath,
        FanartURL,
        UseFolder,
        OutOfTolerance,
        VideoSource,
        NeedsSave,
        SortTitle,
        DateAdded,
        HasEFanarts,
        EFanartsPath,
        HasBanner,
        BannerPath,
        HasLandscape,
        LandscapePath,
        HasTheme,
        ThemePath,
        HasDiscArt,
        DiscArtPath,
        HasClearLogo,
        ClearLogoPath,
        HasClearArt,
        ClearArtPath,
        TMDB,
        TMDBColID,
        DateModified,
        MarkCustom1,
        MarkCustom2,
        MarkCustom3,
        MarkCustom4,
        HasSet
        FROM Movies01;

        DROP TABLE Movies01;

        CREATE TRIGGER delete_movie
        AFTER DELETE
        ON movie
        BEGIN
        DELETE FROM MoviesAStreams WHERE MovieID=old.idMovie;
        DELETE FROM actorlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM MoviesFanart WHERE MovieID=old.idMovie;
        DELETE FROM MoviesPosters WHERE MovieID=old.idMovie;
        DELETE FROM MoviesSets WHERE MovieID=old.idMovie;
        DELETE FROM MoviesSubs WHERE MovieID=old.idMovie;
        DELETE FROM taglinks WHERE idMedia=old.idMovie AND media_type='movie';
        DELETE FROM MoviesVStreams WHERE MovieID=old.idMovie;
        END;
      </execute>
    </command>
    <command type="DB">
      <description>6</description>
      <execute>
        CREATE TABLE movielinktvshow (
        idMovie  integer,
        idShow   integer
        );

        CREATE UNIQUE INDEX ix_movielinktvshow_1
        ON movielinktvshow
        (idShow, idMovie);

        CREATE UNIQUE INDEX ix_movielinktvshow_2
        ON movielinktvshow
        (idMovie, idShow);
      </execute>
    </command>
    <command type="DB">
      <description>6</description>
      <execute>
        CREATE TRIGGER delete_MoviesSets
        AFTER DELETE
        ON Sets
        BEGIN
        DELETE FROM MoviesSets WHERE SetID=old.ID;
        END;
      </execute>
    </command>
  </transaction>
  <noTransaction type="">
  </noTransaction>
<!-- 
  <noTransaction type="DB">
    <description>nd1</description>
    <execute>ne1</execute>
  </noTransaction>
-->
</CommandFile>